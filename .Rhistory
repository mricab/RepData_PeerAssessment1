X <- matrix(1:9,3,3)
X
solve(X)
A <- Magic(2)
X <- ones(3,3)
X <- matrix(1,3,3)
X
solve(X)
X <- matrix(2)
X
data <- c(3,2,5,8)
X <- matrix(data, 2, 2)
solve(X)
INVX <- solve(X)
x*INVx
x*INVx
X*INVX
INVX*X
## this function creates a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## this function computes the inverse of the special matrix returned by makeCacheMatrix function
## if the inverse has already been calculated than it returns the cached value
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
A <- matrix(1:4,2,2)
A
makeCacheMatrix(A)
B<- makeCacheMatrix(A)
cacheSolve(B)
B%*%A
C <- cacheSolve(B)
C*A
C%*%A
B$setinverse(c(1,1))
B$getinverse
B$getinverse()
library(datasets)
data(iris)
?iris
iris
iris$Sepal.Length
iris$Sepal.Length[1]
iris$Sepal.Length[1:23]
iris$Sepal.Length[101:150]
vir.sepal.length<- iris$Sepal.Length[101:150]
mean(vir.sepal.length)
colMeans(iris)
colMeans(iris, dims=4)
colMeans(iris, FALSE, 1:4)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
A <- tapply(mtcars$hp, mtcars$cyl, mean)
A$4
A[1]
A[2]
A[1]-A[2]
tapply(iris$Sepal.Length, iris$Species, mean)
A[1]-A[3]
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
ploy(x,y)
plot(x,y)
x
e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
setwd("/Volumes/MARCE/Estudios/03 Data Science/05 Reproducible Research/Peer assessment 1/Repositorio/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
library(ggplot2)
library(ggplot2)
qplot(data$steps)
mean(data$steps, na.rm=TRUE)
median(data$steps, na.rm=TRUE)
library(reshape2)
ave.steps <- dcast(data, date + interval ~ ., value.var="steps", mean)
View(ave.steps)
ave.steps <- dcast(data, . ~ interval + date, value.var="steps", mean)
View(ave.steps)
ave.steps <- dcast(data, interval + date ~ ., value.var="steps", mean)
View(ave.steps)
ave.steps <- dcast(data, interval ~ date, value.var="steps", mean)
View(ave.steps)
ave.steps <- dcast(data, date + interval ~ ., value.var="steps")
ave.steps <- dcast(data, interval ~ date, value.var="steps")
View(ave.steps)
stepsbyday <- dcast(data, interval ~ date, value.var="steps")
View(stepsbyday)
stepsbyday <- dcast(data, interval ~ ., value.var="steps")
View(stepsbyday)
stepsbyday <- dcast(data, interval ~ ., value.var="steps", mean)
View(stepsbyday)
stepsbyday <- dcast(data, interval ~ ., value.var="steps", mean(na.rm=TRUE))
stepsbyday <- dcast(data, interval ~ ., value.var="steps", mean(..., na.rm=TRUE))
stepsbyday <- dcast(data, interval ~ ., value.var="steps", na.rm=TRUE, mean)
View(stepsbyday)
ave.steps <- dcast(data, interval ~ ., value.var="steps", na.rm=TRUE, mean)
qplot(ave.steps[,1], ave.steps[,2])
qplot(ave.steps[,1], ave.steps[,2], geom=(lines))
mean(ave.steps[,2], na.rm=TRUE)
median(ave.steps[,2], na.rm=TRUE)
max(ave.steps[,2])
pmax(ave.steps[,2])
qplot(ave.steps[,1], ave.steps[,2], geom=(path))
qplot(ave.steps[,1], ave.steps[,2], geom=path)
qplot(ave.steps[,1], ave.steps[,2], geom="path")
View(ave.steps)
max(ave.steps)
max(ave.steps[,2])
row.names(ave.steps)
ave.steps[which(ave$steps[,2==maxsteps)]
ave.steps[which(ave$steps[,2]==maxsteps)]
ave.steps[which(ave.steps[,2]==maxsteps)]
maxsteps <- max(ave.steps[,2])
ave.steps[which(ave.steps[,2]==maxsteps)]
sum(is.na(data$steps))
View(data)
legnth(data$steps)
length(data$steps)
l <- length(data$steps)
data_imputed <- data
length(data$steps)
which(ave.steps[,1]==5)
View(ave.steps)
i=1
interval <- data_imputed$interval[i]
interval
if (is.na(data_imputed$steps[i])) data_imputed$steps[i] <- ave.steps(which(ave.steps[,1]==interval));
if (is.na(data_imputed$steps[i])) data_imputed$steps[i] <- ave.steps[which(ave.steps[,1]==interval)];
View(data_imputed)
which(ave.steps[,1]==interval)
if (is.na(data_imputed$steps[i])) data_imputed$steps[i] <- ave.steps[which(ave.steps[,1]==interval),2];
View(data_imputed)
rowave<- which(ave.steps[,1]==interval);
rowave
ave.stesps[1,2]
ave.steps[1,2]
if (is.na(data_imputed$steps[i])) data_imputed$steps[i] <- ave.steps[rowave, 2];
View(data_imputed)
data_imputed <- data
ave.steps[1,2]
View(data_imputed)
if (is.na(data_imputed$steps[i])) data_imputed$steps[i] <- ave.steps[rowave, 2];
View(data_imputed)
for (i in 1:l){
interval <- data_imputed$interval[i];
rowave<- which(ave.steps[,1]==interval);
if (is.na(data_imputed$steps[i])) data_imputed$steps[i] <- ave.steps[rowave, 2];
}
View(data_imputed)
qplot(data_imputed$steps)
mean(data$imputed$steps)
mean(data_imputed$steps)
median(data_imputed$steps)
mean(data$steps, na.rm=TRUE)
median(data$steps, na.rm=TRUE)
maxsteps <- max(ave.steps[,2])
which(ave.steps[,2]==maxsteps)
weekdays(data_imputed$date[1])
data_imputed$date[1]
paste(data_imputed$date[1], sep="")
weekdays(paste(data_imputed$date[1], sep=""))
View(data_imputed)
as.date(data_imputed$date[1])
as.Date(data_imputed$date[1])
weekdays(as.Date(data_imputed$date[1]))
data_imputed$weekday <- as.Date(data_imputed$date)
View(data_imputed)
data_imputed$weekday <- weekdays(as.Date(data_imputed$date))
View(data_imputed)
str(data_imputed$weekday)
for (i in l){
if (data_imputed$weekday=="Saturday" | data_imputed$weekday=="Sunday") data_imputed$weekpart <- weekend else data_imputed$weekpart <- weekday;
}
data_imputed$weekpart <- NA
View(data_imputed)
if (data_imputed$weekday[i]=="Saturday" | data_imputed$weekday[i]=="Sunday") data_imputed$weekpart[i] <- weekend else data_imputed$weekpart[i] <- weekday;
if (data_imputed$weekday[i]=="Saturday" | data_imputed$weekday[i]=="Sunday") data_imputed$weekpart[i] <- "weekend" else data_imputed$weekpart[i] <- "weekday";
View(data_imputed)
for (i in 1:l){
if (data_imputed$weekday[i]=="Saturday" | data_imputed$weekday[i]=="Sunday") data_imputed$weekpart[i] <- "weekend" else data_imputed$weekpart[i] <- "weekday";
}
View(data_imputed)
ave.steps.imputed <- dcast(data, interval + weekpar ~ ., value.var="steps", na.rm=TRUE, mean)
ave.steps.imputed <- dcast(data, interval + weekpart ~ ., value.var="steps", na.rm=TRUE, mean)
ave.steps.imputed <- dcast(data_imputed, interval + weekpart ~ ., value.var="steps", mean)
View(ave.steps.imputed)
qplot(ave.steps.imputed[,1], ave.steps.imputed[,2], geom="path", facets=.~ave.steps.imputed$weekpart)
names(ave.steps.imputed)
names(ave.steps.imputed) <- c("interval", "weekpart", "steps")
qplot(interval, steps, ave.steps.imputed, geom="path", facets=. ~ weekpart)
View(ave.steps.imputed)
qplot(interval, steps, ave.steps.imputed, geom="path", facets=.~weekpart)
ggplot(ave.steps-imputed, aes(interval, steps)) + geom_path() + facets_grid(.~weekpart)
ggplot(ave.steps.imputed, aes(interval, steps)) + geom_path() + facets_grid(.~weekpart)
ggplot(ave.steps.imputed, aes(interval, steps)) + geom_path() + facet_grid(.~weekpart)
